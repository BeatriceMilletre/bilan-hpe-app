# -*- coding: utf-8 -*-
import re
from io import BytesIO
from datetime import datetime

import streamlit as st
import pandas as pd
import numpy as np
from docx import Document

st.set_page_config(page_title="Bilan HPE ‚Äì Passation & Scores", page_icon="üß†", layout="wide")

# =========================
# Outils parsing DOCX
# =========================
SECTION_HEADERS = [
    "SPQ 10", "EQ 10", "Q-R-10", "QA‚Äì 10", "QA- 10", "QA-10",
    "Echelle Rationnelle Exp√©rientielle", "√âchelle Rationnelle Exp√©rientielle",
    "Codage invers√©", "Habilet√© rationnelle", "Engagement rationnel",
    "Habilet√© exp√©rientielle", "Engagement exp√©rientiel"
]

# Map d‚Äôoptions lisibles -> valeur num√©rique selon les bar√®mes pr√©sents dans le DOCX
# NB : On d√©tecte (3 2 1 0) etc pour chaque item, donc on stocke aussi un fallback Likert.
LIKERT_LABELS_FR = [
    "Tout √† fait d‚Äôaccord",
    "Plut√¥t d‚Äôaccord",
    "Plut√¥t pas d‚Äôaccord",
    "Pas du tout d‚Äôaccord"
]

LIKERT_LABELS_FR4_REV = [
    "Tout √† fait d‚Äôaccord",
    "Plut√¥t d‚Äôaccord",
    "Plut√¥t en d√©saccord",
    "Tout √† fait en d√©saccord"
]

def load_docx(file_bytes: bytes) -> Document:
    return Document(BytesIO(file_bytes))

def paragraphs_text(doc: Document):
    for p in doc.paragraphs:
        txt = p.text.strip()
        if txt:
            yield txt

def normalize(s: str) -> str:
    return re.sub(r"\s+", " ", s.strip())

def detect_section_blocks(lines):
    # Renvoie dict {section_name: [lignes]}
    sections = {}
    current = None
    for ln in lines:
        line = normalize(ln)
        if any(line.startswith(h) for h in SECTION_HEADERS):
            current = line
            sections[current] = []
        elif current:
            sections[current].append(line)
    return sections

# Extraction des items ‚Äúintitul√© ‚Ä¶ (3 2 1 0)‚Äù etc
BAR_PATTERN = re.compile(r"\((?P<scores>(?:\d+\s+)+\d+)\)")
FOUR_COL_SET = set(LIKERT_LABELS_FR)
FOUR_COL_ALT_SET = set(LIKERT_LABELS_FR4_REV)

def parse_simple_scale(block_lines, default_labels):
    """
    Parse items sous forme:
    - Intitul√© ... (3 2 1 0)  -> on lit le mapping sp√©cifique
    - Entre les items, des lignes vides/consignes possibles
    Retourne: list[dict{id,text,labels,values}]
    """
    items = []
    idx = 1
    buf = []
    for line in block_lines:
        if not line:
            continue
        # Item si ligne contient un bar√®me (nombres entre parenth√®ses)
        m = BAR_PATTERN.search(line)
        if m:
            scores = [int(x) for x in m.group("scores").split()]
            # Nettoyage intitul√© sans la parenth√®se
            text = normalize(BAR_PATTERN.sub("", line)).strip(" .:;-")
            # Construit labels (4 positions par d√©faut)
            labels = default_labels
            # Valeurs align√©es √† gauche (labels[0] => scores[0], etc.)
            # Si le doc a 4 valeurs, on mappe 4 labels. Si 2 valeurs r√©p√©t√©es, on conserve tel quel.
            values = scores
            items.append({
                "id": f"Q{idx}",
                "text": text,
                "labels": labels,
                "values": values
            })
            idx += 1
        # On ignore les autres lignes (titres de colonnes d√©j√† connus)
    return items

def parse_eq_block(block_lines):
    # EQ-10 pr√©sente souvent (2 1 0 0) ou (0 0 1 2) selon l‚Äôorientation.
    # On lit chaque item avec son bar√®me explicite.
    return parse_simple_scale(block_lines, LIKERT_LABELS_FR)

def parse_spq_block(block_lines):
    # SPQ-10 avec (3 2 1 0)
    return parse_simple_scale(block_lines, LIKERT_LABELS_FR)

def parse_qr_block(block_lines):
    # Q-R-10 avec libell√©s ‚ÄúPlut√¥t en d√©saccord / Tout √† fait en d√©saccord‚Äù
    return parse_simple_scale(block_lines, LIKERT_LABELS_FR4_REV)

def parse_qa_block(block_lines):
    # QA-10 m√©lange des (1 1 0 0), (0 0 1 1), etc.
    # On lit le bar√®me propre √† chaque item.
    # Libell√©s proches de Q-R-10, on garde la m√™me variante 4 points.
    return parse_simple_scale(block_lines, LIKERT_LABELS_FR4_REV)

# Parsing √âchelle Rationnelle/Exp√©rientielle
# On d√©tecte les items ‚ÄúHR/ER/HE/EE‚Äù + bar√®me (5 4 3 2 1) ou invers√© (1 2 3 4 5)
FIVE_LABELS = ["Tout √† fait d‚Äôaccord", "Plut√¥t d‚Äôaccord", "NSP", "Plut√¥t pas d‚Äôaccord", "Tout √† fait d‚Äôaccord"]  # juste indicatif; l‚Äôapp affiche un slider 1..5

FIVE_PATTERN = re.compile(r"\((?P<a>\d)\s+(?P<b>\d)\s+(?P<c>\d)\s+(?P<d>\d)\s+(?P<e>\d)\)")
SCALE_TAG_PATTERN = re.compile(r"^(HR|ER|HE|EE)\s*(.*)$", re.IGNORECASE)

def parse_re_block(block_lines):
    items = []
    idx = 1
    for line in block_lines:
        m_tag = SCALE_TAG_PATTERN.match(line)
        m_bar = FIVE_PATTERN.search(line)
        if m_tag and m_bar:
            tag = m_tag.group(1).upper()
            text = normalize(m_tag.group(2)).strip(" .:;-")
            values = [int(m_bar.group(k)) for k in ["a","b","c","d","e"]]
            items.append({
                "id": f"R{idx}",
                "text": text,
                "labels": ["5","4","3","2","1"],  # on affichera 1..5 UI; values fait foi
                "values": values,
                "tag": tag
            })
            idx += 1
    return items

REV_LIST_PATTERN = re.compile(r"Codage invers√©\s*[:Ôºö]?\s*(.*)$", re.IGNORECASE)

def extract_reverse_list(full_text_lines):
    # Cherche la ligne ‚ÄúCodage invers√© : ‚Ä¶‚Äù et r√©cup√®re la liste des num√©ros pour l‚Äô√©chelle R/E
    joined = " ".join(full_text_lines)
    m = REV_LIST_PATTERN.search(joined)
    if not m:
        return set()
    nums = re.findall(r"\d+", m.group(1))
    return set(int(n) for n in nums)

# Formules 4 scores (moyenne de certains items)
# On rep√®re la ligne ‚ÄúHabilet√© rationnelle = (1 + 4 + ...)/10‚Äù etc
FORMULA_PATTERN = re.compile(
    r"(Habilet√© rationnelle|Engagement rationnel|Habilet√© exp√©rientielle|Engagement exp√©rientiel)\s*=\s*\(([^)]+)\)\s*/\s*(\d+)",
    re.IGNORECASE
)

def extract_formulas(full_text):
    formulas = {}
    for m in FORMULA_PATTERN.finditer(full_text):
        label = m.group(1).strip().lower()
        nums = [int(x) for x in re.findall(r"\d+", m.group(2))]
        denom = int(m.group(3))
        formulas[label] = {"items": nums, "denom": denom}
    return formulas

# =========================
# UI ‚Äì Upload & Parsing
# =========================
st.title("üß† Bilan HPE ‚Äì Passation & Interpr√©tation automatique")
st.write("Charge **ton fichier DOCX** puis passe les questionnaires. Les scores et un compte-rendu seront g√©n√©r√©s.")

uploaded = st.file_uploader("D√©pose le fichier DOCX (ex: Bilan HPE 10 avec codage.docx)", type=["docx"])
if not uploaded:
    st.info("En attente de ton fichier‚Ä¶")
    st.stop()

doc = load_docx(uploaded.read())
lines = [normalize(t) for t in paragraphs_text(doc)]
sections = detect_section_blocks(lines)
full_text = " ".join(lines)

# Reverse list + formules pour l‚Äô√©chelle R/E
reverse_set = extract_reverse_list(lines)
formulas = extract_formulas(full_text)

# Parse des 5 blocs principaux
def get_block(name_candidates):
    for key in sections.keys():
        for cand in name_candidates:
            if key.lower().startswith(cand.lower()):
                return sections[key]
    return []

spq_block = get_block(["SPQ 10"])
eq_block  = get_block(["EQ 10"])
qr_block  = get_block(["Q-R-10"])
qa_block  = get_block(["QA‚Äì 10","QA- 10","QA-10"])
re_block  = get_block(["Echelle Rationnelle Exp√©rientielle","√âchelle Rationnelle Exp√©rientielle"])

spq_items = parse_spq_block(spq_block)
eq_items  = parse_eq_block(eq_block)
qr_items  = parse_qr_block(qr_block)
qa_items  = parse_qa_block(qa_block)
re_items  = parse_re_block(re_block)

if not any([spq_items, eq_items, qr_items, qa_items, re_items]):
    st.error("Je n‚Äôai pas r√©ussi √† extraire des items. V√©rifie le format du document.")
    st.stop()

# =========================
# Passation ‚Äì M√©ta
# =========================
with st.sidebar:
    st.header("Infos r√©pondant")
    name = st.text_input("Nom (optionnel)")
    age = st.text_input("√Çge (optionnel)")
    st.caption("Les infos s‚Äôajoutent au rapport. Non obligatoires.")

# =========================
# UI ‚Äì Questionnaire
# =========================
def ask_block(title, items, scale_note=None):
    st.subheader(title)
    if scale_note:
        st.caption(scale_note)
    answers = {}
    for it in items:
        # valeurs et labels peuvent diverger (ex: (2 1 0 0))
        lbls = it["labels"]
        vals = it["values"]
        # UI: on affiche un select horizontal
        cols = st.columns(2)
        with cols[0]:
            st.write(f"**{it['id']}**. {it['text']}")
        with cols[1]:
            choice = st.radio(
                f"{title}-{it['id']}",
                options=list(range(len(vals))),
                index=0,
                horizontal=True,
                label_visibility="collapsed",
                format_func=lambda i: lbls[i] if i < len(lbls) else str(i)
            )
        answers[it["id"]] = vals[choice]
        st.divider()
    return answers

spq_answers = {}
eq_answers  = {}
qr_answers  = {}
qa_answers  = {}
re_answers  = {}

with st.expander("üü¶ SPQ-10 (sensibilit√©s sensorielles)"):
    spq_answers = ask_block(
        "SPQ-10",
        spq_items,
        "Bar√®me itemis√© tel que dans le document (ex: 3-2-1-0)."
    )

with st.expander("üü® EQ-10 (empathie)"):
    eq_answers = ask_block(
        "EQ-10",
        eq_items,
        "Bar√®me itemis√© tel que dans le document (ex: 2-1-0-0 / 0-0-1-2)."
    )

with st.expander("üü© Q-R-10"):
    qr_answers = ask_block(
        "Q-R-10",
        qr_items,
        "Bar√®me itemis√© (4 points)."
    )

with st.expander("üüß QA-10"):
    qa_answers = ask_block(
        "QA-10",
        qa_items,
        "Bar√®me itemis√© (4 points)."
    )

with st.expander("üü• √âchelle Rationnelle / Exp√©rientielle (HR, ER, HE, EE)"):
    st.caption("Bar√®mes 5 points itemis√©s; **codage invers√©** appliqu√© aux num√©ros indiqu√©s dans le document.")
    # On affiche un slider 1..5 mais on enregistrera la note selon le mapping values
    for i, it in enumerate(re_items, start=1):
        st.write(f"**{i}. [{it.get('tag','?')}]** {it['text']}")
        # On propose un choix 1..5 ‚Äúacquiescement -> d√©saccord‚Äù
        val = st.slider(f"re-{i}", min_value=1, max_value=5, value=5, label_visibility="collapsed")
        # Convertit 1..5 en index 0..4 (gauche->droite)
        idx = 5 - val  # 5 -> 0, 1 -> 4 (car le doc parfois est (5 4 3 2 1))
        # Score brut via valeurs de la parenth√®se
        raw_score = it["values"][idx]
        # Codage invers√© si i dans reverse_set
        if i in reverse_set:
            # Inversion ‚Äúlin√©aire‚Äù sur √©chelle 1..5: on permute index
            idx_inv = 4 - idx
            raw_score = it["values"][idx_inv]
        re_answers[i] = {"score": raw_score, "tag": it.get("tag","")}

# =========================
# Scoring
# =========================
def sum_dict(d):
    return sum(float(v) for v in d.values()) if d else 0.0

spq_total = sum_dict(spq_answers)
eq_total  = sum_dict(eq_answers)
qr_total  = sum_dict(qr_answers)
qa_total  = sum_dict(qa_answers)

# R/E ‚Äì calcule 4 sous-√©chelles selon formules extraites
def compute_subscale(formula_label):
    f = formulas.get(formula_label, None)
    if not f:
        return None
    vals = []
    for n in f["items"]:
        if n in re_answers:
            vals.append(float(re_answers[n]["score"]))
    if not vals:
        return None
    return round(np.mean(vals), 3)

HR = compute_subscale("habilet√© rationnelle")
ER = compute_subscale("engagement rationnel")
HE = compute_subscale("habilet√© exp√©rientielle")
EE = compute_subscale("engagement exp√©rientiel")

# =========================
# Interpr√©tation (minimale, √† ajuster apr√®s validation)
# =========================
def band(value, low_mid_high=(0.33, 0.66)):
    if value is None:
        return "‚Äî"
    # Normalisation simple selon max th√©orique approximatif
    # SPQ-10: items typiques (3 max) * 10 => ~30; EQ ~20; QR ~20; QA ~10 (selon bar√®mes)
    return value

def interp_re(label, val):
    if val is None:
        return ""
    if label in ["HR","ER"]:
        # Rationnel
        if val >= 4.0:
            return f"{label} √©lev√© : app√©tence/aisance pour l‚Äôanalyse, le raisonnement explicite."
        elif val >= 3.0:
            return f"{label} mod√©r√© : ressources rationnelles pr√©sentes, variables selon contexte."
        else:
            return f"{label} faible : pr√©f√©rences possiblement moins ‚Äòlogiques‚Äô d√©clar√©es (√† contextualiser)."
    else:
        # Exp√©rientiel
        if val >= 4.0:
            return f"{label} √©lev√© : place importante de l‚Äôintuition/ressenti dans les d√©cisions."
        elif val >= 3.0:
            return f"{label} mod√©r√© : l‚Äôintuition coexiste avec le rationnel."
        else:
            return f"{label} faible : faible recours auto-rapport√© √† l‚Äôintuition."
        
def format_score(val):
    return "‚Äî" if val is None else f"{val:.2f}"

# =========================
# Affichage r√©sultats
# =========================
st.header("R√©sultats")
col1, col2 = st.columns(2)
with col1:
    st.subheader("Synth√®se questionnaires courts")
    df_short = pd.DataFrame([
        {"√âchelle": "SPQ-10", "Total": spq_total},
        {"√âchelle": "EQ-10",  "Total": eq_total},
        {"√âchelle": "Q-R-10", "Total": qr_total},
        {"√âchelle": "QA-10",  "Total": qa_total},
    ])
    st.dataframe(df_short, use_container_width=True)

with col2:
    st.subheader("Rationnel / Exp√©rientiel")
    df_re = pd.DataFrame([
        {"Sous-√©chelle": "HR (Habilet√© rationnelle)", "Score (1-5)": HR, "Interpr√©tation": interp_re("HR", HR)},
        {"Sous-√©chelle": "ER (Engagement rationnel)", "Score (1-5)": ER, "Interpr√©tation": interp_re("ER", ER)},
        {"Sous-√©chelle": "HE (Habilet√© exp√©rientielle)", "Score (1-5)": HE, "Interpr√©tation": interp_re("HE", HE)},
        {"Sous-√©chelle": "EE (Engagement exp√©rientiel)", "Score (1-5)": EE, "Interpr√©tation": interp_re("EE", EE)},
    ])
    st.dataframe(df_re, use_container_width=True)

# =========================
# Rapport exportable
# =========================
def build_report():
    lines = []
    lines.append(f"# Bilan HPE ‚Äì Compte-rendu automatique")
    lines.append(f"**Date** : {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    meta = " ‚Äì ".join([p for p in [f"Nom: {name}" if name else None, f"√Çge: {age}" if age else None] if p])
    if meta: lines.append(meta)
    lines.append("")
    lines.append("## Scores ‚Äì questionnaires courts")
    lines.append(f"- SPQ-10 : **{spq_total:.0f}**")
    lines.append(f"- EQ-10 : **{eq_total:.0f}**")
    lines.append(f"- Q-R-10 : **{qr_total:.0f}**")
    lines.append(f"- QA-10 : **{qa_total:.0f}**")
    lines.append("")
    lines.append("## Rationnel / Exp√©rientiel (1‚Äì5)")
    lines.append(f"- HR : **{format_score(HR)}** ‚Äì {interp_re('HR', HR)}")
    lines.append(f"- ER : **{format_score(ER)}** ‚Äì {interp_re('ER', ER)}")
    lines.append(f"- HE : **{format_score(HE)}** ‚Äì {interp_re('HE', HE)}")
    lines.append(f"- EE : **{format_score(EE)}** ‚Äì {interp_re('EE', EE)}")
    lines.append("")
    lines.append("> *Note : seuils/interpr√©tations √† affiner apr√®s validation interne. Les vignettes A/B du document sont **illustratives** et non scor√©es dans cette app.*")
    return "\n".join(lines)

report_md = build_report()
st.download_button("üíæ T√©l√©charger le rapport (.md)", data=report_md, file_name="bilan_hpe_rapport.md", mime="text/markdown")

# Export CSV des r√©ponses brutes
raw = {
    **{f"SPQ_{k}": v for k, v in spq_answers.items()},
    **{f"EQ_{k}": v for k, v in eq_answers.items()},
    **{f"QR_{k}": v for k, v in qr_answers.items()},
    **{f"QA_{k}": v for k, v in qa_answers.items()},
}
# R/E d√©taill√©
for n, obj in re_answers.items():
    raw[f"RE_item_{n}"] = obj["score"]
raw.update({"HR": HR, "ER": ER, "HE": HE, "EE": EE})

raw_df = pd.DataFrame([raw])
st.download_button("‚¨áÔ∏è Exporter les r√©ponses (.csv)", data=raw_df.to_csv(index=False).encode("utf-8"), file_name="bilan_hpe_reponses.csv", mime="text/csv")

st.success("Pr√™t. Tu peux passer les questionnaires, puis exporter le rapport et les donn√©es.")
