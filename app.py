# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import yaml
import io
import os
import random
import smtplib
from email.message import EmailMessage
from datetime import datetime
from pathlib import Path

# ------------------------------------------------------------
# Config
# ------------------------------------------------------------
st.set_page_config(page_title="Bilan HPE ‚Äì Questionnaire", page_icon="üß≠", layout="wide")

YAML_PATH = Path("questionnaire.yml")
RESULTS_DIR = Path("results")
RESULTS_DIR.mkdir(exist_ok=True)

DEFAULT_LIKERT4 = ["Tout √† fait d‚Äôaccord","Plut√¥t d‚Äôaccord","Plut√¥t pas d‚Äôaccord","Pas du tout d‚Äôaccord"]

# ------------------------------------------------------------
# Chargement YAML
# ------------------------------------------------------------
if not YAML_PATH.exists():
    st.error("Le fichier 'questionnaire.yml' est introuvable √† la racine du d√©p√¥t.")
    st.stop()

with YAML_PATH.open("r", encoding="utf-8") as f:
    data = yaml.safe_load(f)

thresholds = data.get("thresholds", {})

# ------------------------------------------------------------
# Utilitaires
# ------------------------------------------------------------
def make_recovery_code(n=6):
    # Code lisible type A1BF01
    alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
    return "".join(random.choice(alphabet) for _ in range(n))

def categorize(value, thres: dict):
    if value is None: return "‚Äî"
    if value >= thres.get("high", 9e9): return "√©lev√©"
    if value >= thres.get("medium", -9e9): return "moyen"
    return "faible"

def save_results(code: str, report_md: str, csv_bytes: bytes):
    folder = RESULTS_DIR / code
    folder.mkdir(parents=True, exist_ok=True)
    (folder / "rapport.md").write_text(report_md, encoding="utf-8")
    (folder / "reponses.csv").write_bytes(csv_bytes)
    return folder

def send_code_to_practitioner(code: str, practitioner_email: str):
    sender = st.secrets.get("EMAIL_SENDER")
    app_pwd = st.secrets.get("EMAIL_APP_PASSWORD")
    if not sender or not app_pwd:
        st.warning("EMAIL_SENDER / EMAIL_APP_PASSWORD non configur√©s dans Secrets : l‚Äôe-mail ne sera pas envoy√©.")
        return False

    msg = EmailMessage()
    msg["From"] = sender
    msg["To"] = practitioner_email
    msg["Subject"] = "Nouveau r√©sultat ‚Äì Code de r√©cup√©ration"
    msg.set_content(
        f"Bonjour,\n\nUn r√©pondant vient de terminer le questionnaire.\n"
        f"Code de r√©cup√©ration : {code}\n\n"
        "Pour r√©cup√©rer les fichiers, utilisez l‚Äôonglet ¬´ Acc√®s praticien ¬ª et saisissez ce code.\n\n"
        "Bien cordialement,\nBilan HPE"
    )
    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(sender, app_pwd)
            smtp.send_message(msg)
        return True
    except Exception as e:
        st.error(f"√âchec d‚Äôenvoi de l‚Äôe-mail praticien : {e}")
        return False

def synthese_re(hr, er, he, ee, thres_re: dict):
    parts = []
    for lab, val in [("HR",hr),("ER",er),("HE",he),("EE",ee)]:
        cat = categorize(val, thres_re.get(lab, {}))
        txt = (
            {"√©lev√©":"forte aisance/motivation analytique",
             "moyen":"ressources rationnelles pr√©sentes",
             "faible":"habilet√© analytique per√ßue plus basse"} if lab in ["HR","ER"]
            else
            {"√©lev√©":"recours fr√©quent √† l‚Äôintuition/ressenti",
             "moyen":"√©quilibre intuition/logique",
             "faible":"intuition moins mobilis√©e"}
        ).get(cat, "‚Äî")
        sval = "‚Äî" if val is None else f"{val:.2f}"
        parts.append(f"- {lab} **{sval}** ({cat}) : {txt}.")
    return "\n".join(parts)

# ------------------------------------------------------------
# UI widgets (Likert / REI / Forced-choice)
# ------------------------------------------------------------
def ask_block_likert(block: dict):
    labels = block.get("scale_labels", DEFAULT_LIKERT4)
    out = {}
    st.subheader(block.get("key", "√âchelle"))
    for it in block.get("items", []):
        vals = it["values"]; n = len(vals)
        local_labels = (labels + [f"Option {i+1}" for i in range(len(labels), n)])[:n]
        c1, c2 = st.columns([3,2])
        with c1: st.write(f"**{it['id']}** ‚Äî {it.get('text','')}")
        with c2:
            choice = st.radio(it["id"], options=list(range(n)), index=0,
                              horizontal=True, label_visibility="collapsed",
                              format_func=lambda i: local_labels[i])
        out[it["id"]] = vals[choice]
        st.divider()
    return out

def ask_block_re(block: dict):
    st.subheader("√âchelle R/E (1‚Äì5)")
    scores = {}
    for it in block.get("items", []):
        iid, tag, text = it.get("id"), it.get("tag"), it.get("text","")
        val = st.slider(f"{iid} ‚Äì {tag} : {text}", 1, 5, 3, key=f"rei-{iid}")
        if it.get("reverse", False): val = 6 - val
        scores[str(iid)] = {"tag": str(tag).upper(), "score": float(val)}
    return scores

def ask_block_forced_choice(block: dict):
    st.subheader(block.get("key","BMRI (A/B)"))
    choices = {}
    for idx, it in enumerate(block.get("items", []), 1):
        stem, a, b = it.get("stem",""), it.get("a",""), it.get("b","")
        st.markdown(f"**{it.get('id', f'FC{idx}')}** ‚Äî {stem}")
        pick = st.radio(it.get("id", f"FC{idx}"), options=["A","B"], index=0, horizontal=True,
                        format_func=lambda x: f"{x}) {a if x=='A' else b}")
        choices[it.get("id", f"FC{idx}")] = pick
        st.divider()
    return {"choices": choices}

# ------------------------------------------------------------
# Rapport
# ------------------------------------------------------------
def build_report(short_totals, re_scores, HR, ER, HE, EE, name=None, age=None, bmri_result=None):
    short_cats = {k: categorize(v, thresholds.get("short_scales", {}).get(k, {}))
                  for k, v in short_totals.items()}
    L = []
    L.append("# Bilan HPE ‚Äì Rapport")
    L.append(f"**Date** : {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    meta = " ‚Äì ".join(x for x in [f"Nom: {name}" if name else None, f"√Çge: {age}" if age else None] if x)
    if meta: L.append(meta)
    L.append("")
    if short_totals:
        L.append("## Scores ‚Äì courts")
        for k,v in short_totals.items():
            L.append(f"- {k} : **{v:.0f}** ({short_cats.get(k,'‚Äî')})")
        L.append("")
    L.append("## Rationnel / Exp√©rientiel (1‚Äì5)")
    for lab, val in [("HR",HR),("ER",ER),("HE",HE),("EE",EE)]:
        sval = "‚Äî" if val is None else f"{val:.2f}"
        L.append(f"- {lab} : **{sval}**")
    L.append("")
    L.append("## Synth√®se R/E")
    L.append(synthese_re(HR,ER,HE,EE, thresholds.get("re_scales", {})))
    return "\n".join(L)

def mean_tag(tag: str, re_scores):
    vals = [v["score"] for v in re_scores.values() if v["tag"] == tag]
    return round(float(np.mean(vals)), 2) if vals else None

# ------------------------------------------------------------
# Deux parcours : Passer le test / Acc√®s praticien
# ------------------------------------------------------------
tab_test, tab_pro = st.tabs(["üìù Passer le test", "üîë Acc√®s praticien"])

# --------- üìù Passer le test ----------
with tab_test:
    st.title("Questionnaire ‚Äì Passer le test")

    short_totals, re_scores, bmri_result = {}, {}, None

    for block in data.get("blocks", []):
        btype = block.get("type")
        if btype == "re":
            re_scores = ask_block_re(block)
        elif btype == "forced_choice":
            bmri_result = ask_block_forced_choice(block)
        else:
            answers = ask_block_likert(block)
            short_totals[block["key"]] = sum(answers.values())

    HR = mean_tag("HR", re_scores); ER = mean_tag("ER", re_scores)
    HE = mean_tag("HE", re_scores); EE = mean_tag("EE", re_scores)

    st.header("Aper√ßu des r√©sultats")
    c1, c2 = st.columns(2)
    with c1:
        st.subheader("Questionnaires courts")
        if short_totals:
            rows = [{"√âchelle":k, "Total":v, "Cat√©gorie":categorize(v, thresholds.get("short_scales", {}).get(k, {}))}
                    for k,v in short_totals.items()]
            st.dataframe(pd.DataFrame(rows), use_container_width=True)
        else:
            st.caption("Aucun questionnaire court dans ce YAML.")
    with c2:
        st.subheader("R/E (1‚Äì5)")
        rows = [{"Sous-√©chelle":lab, "Score":val} for lab, val in [("HR",HR),("ER",ER),("HE",HE),("EE",EE)]]
        st.dataframe(pd.DataFrame(rows), use_container_width=True)

    # Identit√© (optionnel)
    with st.sidebar:
        st.header("Infos r√©pondant")
        name = st.text_input("Nom (optionnel)")
        age = st.text_input("√Çge (optionnel)")

    # Pr√©pare les fichiers (mais NE LES PROPOSE PAS au t√©l√©chargement ici)
    report = build_report(short_totals, re_scores, HR, ER, HE, EE, name=name, age=age, bmri_result=bmri_result)
    raw = {}
    for k, v in short_totals.items(): raw[k] = v
    for k, v in re_scores.items():    raw[k] = v["score"]
    raw.update({"HR":HR, "ER":ER, "HE":HE, "EE":EE})
    if bmri_result:
        for k, v in bmri_result["choices"].items(): raw[k] = v
    csv_bytes = pd.DataFrame([raw]).to_csv(index=False).encode("utf-8")

    # ---------- Envoi final (automatique vers PRACTITIONER_EMAIL) ----------
    st.markdown("---")
    st.subheader("üßæ Validation & envoi au praticien")

    target_email = st.secrets.get("PRACTITIONER_EMAIL")
    if not target_email:
        st.warning(
            "Adresse praticien non configur√©e : ajoute `PRACTITIONER_EMAIL` dans les Secrets.\n"
            "L‚Äôemail ne sera pas envoy√© mais le code sera affich√© et les fichiers seront sauvegard√©s."
        )

    if st.button("Envoyer"):
        code = make_recovery_code()
        save_results(code, report, csv_bytes)
        sent = False
        if target_email:
            sent = send_code_to_practitioner(code, target_email)

        st.session_state["last_recovery_code"] = code
        if sent:
            st.info("üìß Un email a √©t√© envoy√© automatiquement au praticien avec le code de r√©cup√©ration.")
        st.success(f"R√©sultats enregistr√©s avec le code **{code}** (√† communiquer au praticien).")

# --------- üîë Acc√®s praticien ----------
with tab_pro:
    st.title("Acc√®s praticien")
    st.write("Entrez le code communiqu√© par le r√©pondant pour r√©cup√©rer les fichiers.")
    code_in = st.text_input("Code praticien (ex: A1BF01)").strip().upper()
    if st.button("R√©cup√©rer"):
        if not code_in:
            st.warning("Saisissez un code.")
        else:
            folder = RESULTS_DIR / code_in
            md_path = folder / "rapport.md"
            csv_path = folder / "reponses.csv"
            if md_path.exists() or csv_path.exists():
                st.success(f"R√©sultats trouv√©s pour le code **{code_in}**.")
                col1, col2 = st.columns(2)
                if md_path.exists():
                    st.download_button("üíæ T√©l√©charger le rapport (.md)",
                                       data=md_path.read_text(encoding="utf-8"),
                                       file_name=f"rapport_{code_in}.md",
                                       mime="text/markdown")
                if csv_path.exists():
                    st.download_button("‚¨áÔ∏è T√©l√©charger les r√©ponses (.csv)",
                                       data=csv_path.read_bytes(),
                                       file_name=f"reponses_{code_in}.csv",
                                       mime="text/csv")
            else:
                st.error("Aucun r√©sultat pour ce code. V√©rifiez l‚Äôorthographe ou r√©essayez plus tard.")
